{"version":3,"sources":["../src/index.js"],"names":["CubeGallery","id","minHeight","margin","unit","gallery","document","querySelector","style","fontSize","lineHeight","extra","wrapper","querySelectorAll","length","findExtraWidth","forEach","a","display","position","imgs","window","addEventListener","resize","loadData","create","counter","call","img","complete","console","log","galleryWidth","offsetWidth","images","width","Math","floor","naturalWidth","naturalHeight","height","nbImages","elm","borders","getComputedStyle","borderLeft","Number","borderLeftWidth","substr","borderRight","borderRightWidth","prototype","rows","sumOfWidth","i","currentImg","nextImg","undefined","push"],"mappings":";;;;;;IAAMA,W;AACF,yBAAYC,EAAZ,QAAuC;AAAA;;AAAA,YAArBC,SAAqB,QAArBA,SAAqB;AAAA,YAAVC,MAAU,QAAVA,MAAU;;AAAA;;AACnC;AACA,aAAKF,EAAL,GAAUA,EAAV;AACA;AACA,aAAKC,SAAL,GAAiBA,aAAaA,YAAY,CAAzB,GAA6BA,SAA7B,GAAyC,GAA1D;AACA;AACA,aAAKE,IAAL,GAAY,IAAZ;AACA;AACA,aAAKD,MAAL,GAAcA,UAAUA,SAAS,CAAnB,GAAuBA,MAAvB,GAAgC,CAA9C;;AAEA;AACA,aAAKE,OAAL,GAAeC,SAASC,aAAT,OAA4B,KAAKN,EAAjC,CAAf;AACA,aAAKI,OAAL,CAAaG,KAAb,CAAmBC,QAAnB,GAA8B,GAA9B,CAZmC,CAYD;AAClC,aAAKJ,OAAL,CAAaG,KAAb,CAAmBE,UAAnB,GAAgC,GAAhC,CAbmC,CAaC;;AAEpC;AACA,aAAKC,KAAL,GAAa,CAAb;;AAEA;AACA,YAAIC,UAAUN,SAASO,gBAAT,OAA+B,KAAKZ,EAApC,QAAd;AACA,YAAIW,QAAQE,MAAR,GAAiB,CAArB,EAAwB;AACpB,iBAAKC,cAAL,CAAoBH,QAAQ,CAAR,CAApB;AACAA,oBAAQI,OAAR,CAAgB,aAAK;AACjBC,kBAAET,KAAF,CAAQU,OAAR,GAAkB,cAAlB;AACAD,kBAAET,KAAF,CAAQW,QAAR,GAAmB,UAAnB;AACH,aAHD;AAIH;;AAED,YAAIC,OAAOd,SAASO,gBAAT,OAA+B,KAAKZ,EAApC,UAAX;AACA,aAAKc,cAAL,CAAoBK,KAAK,CAAL,CAApB;;AAEAC,eAAOC,gBAAP,CAAwB,QAAxB,EAAkC,YAAM;AACpC,kBAAKC,MAAL;AACH,SAFD;;AAIA;AACA,YAAIC,WAAW,SAAXA,QAAW;AAAA,mBAAM,MAAKA,QAAL,EAAN;AAAA,SAAf;AACA,YAAIC,SAAS,SAATA,MAAS;AAAA,mBAAM,MAAKA,MAAL,EAAN;AAAA,SAAb;AACA,YAAIC,UAAU,CAAd;;AAEAN,aAAKJ,OAAL,CAAaW,IAAb,CAAkBP,IAAlB,EAAwB,UAASQ,GAAT,EAAc;AAClC,gBAAIA,IAAIC,QAAR,EAAkB;AACdH;AACA,oBAAIA,YAAYN,KAAKN,MAArB,EAA6B;AACzBgB,4BAAQC,GAAR,CAAY,oBAAZ;AACAP,+BAFyB,CAEd;AACXC,6BAHyB,CAGhB;AACZ;AACJ,aAPD,MAQK;AACDG,oBAAIN,gBAAJ,CAAqB,MAArB,EAA6B,YAAM;AAC/BI;AACA,wBAAIA,YAAYN,KAAKN,MAArB,EAA6B;AACzBgB,gCAAQC,GAAR,CAAY,oBAAZ;AACAP,mCAFyB,CAEd;AACXC,iCAHyB,CAGhB;AACZ;AACJ,iBAPD,EAOG,KAPH;AAQH;AACJ,SAnBD;AAoBH;;;;mCAEW;AAAA;;AACR;AACA,iBAAKO,YAAL,GAAoB,KAAK3B,OAAL,CAAa4B,WAAjC;;AAEA;AACA,iBAAKC,MAAL,GAAc5B,SAASO,gBAAT,OAA+B,KAAKZ,EAApC,UAAd;AACA,iBAAKiC,MAAL,CAAYlB,OAAZ,CAAoB,eAAO;AACvBY,oBAAIO,KAAJ,GAAYC,KAAKC,KAAL,CAAWT,IAAIU,YAAJ,GAAmB,OAAKpC,SAAxB,GAAoC0B,IAAIW,aAAnD,CAAZ,EAA+E;AAC/EX,oBAAIY,MAAJ,GAAa,OAAKtC,SADlB,CADuB,CAEK;AAC/B,aAHD;AAIA;AACA,iBAAKuC,QAAL,GAAgB,KAAKP,MAAL,CAAYpB,MAA5B;AACH;;AAED;;;;uCACgB4B,G,EAAK;AACjB,gBAAIC,UAAUC,iBAAiBF,GAAjB,CAAd;AACA,gBAAIG,aAAaC,OAAOH,QAAQI,eAAR,CAAwBC,MAAxB,CAA+B,CAA/B,EAAkCL,QAAQI,eAAR,CAAwBjC,MAAxB,GAAiC,CAAnE,CAAP,CAAjB;AACA,gBAAImC,cAAcH,OAAOH,QAAQO,gBAAR,CAAyBF,MAAzB,CAAgC,CAAhC,EAAmCL,QAAQI,eAAR,CAAwBjC,MAAxB,GAAiC,CAApE,CAAP,CAAlB;AACA,iBAAKH,KAAL,GAAa,KAAKA,KAAL,GAAakC,UAAb,GAA0BI,WAAvC;AACH;;;;;;AAGLjD,YAAYmD,SAAZ,CAAsB5B,MAAtB,GAA+B,YAAY;AACvC,SAAKC,QAAL;AACA,WAAO,KAAKC,MAAL,EAAP;AACH,CAHD;;AAKAzB,YAAYmD,SAAZ,CAAsB1B,MAAtB,GAA+B,YAAY;AAAA;;AACvC,QAAI2B,OAAO,EAAX;AACA,QAAIhC,OAAO,EAAX;AACA,QAAIiC,aAAa,CAAjB,CAHuC,CAGpB;AACnB,SAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAI,KAAKb,QAAzB,EAAmCa,GAAnC,EAAwC;AACpC,YAAIC,aAAa,KAAKrB,MAAL,CAAYoB,CAAZ,CAAjB;AACA,YAAIE,UAAU,KAAKtB,MAAL,CAAYoB,IAAE,CAAd,KAAoBG,SAApB,GAAgC,KAAKvB,MAAL,CAAYoB,IAAE,CAAd,CAAhC,GAAmD,IAAjE;;AAEAD,qBAAajB,KAAKC,KAAL,CAAWgB,aAAaE,WAAWpB,KAAnC,CAAb;;AAEAf,aAAKsC,IAAL,CAAUH,UAAV;;AAEA,YAAIC,WAAW,IAAX,IAAmBpB,KAAKC,KAAL,CAAWgB,aAAaG,QAAQrB,KAAhC,IAAyC,KAAKH,YAArE,EAAmF;AAAE;AACjFoB,iBAAKM,IAAL,CAAUtC,IAAV;AACAiC,yBAAa,CAAb;AACAjC,mBAAO,EAAP;AACH;AACJ;;AAEDgC,SAAKpC,OAAL,CAAa,gBAAQ;AACjB,YAAIqC,aAAa,CAAjB,CADiB,CACE;AACnBjC,aAAKJ,OAAL,CAAa;AAAA,mBAAOqC,aAAajB,KAAKC,KAAL,CAAWgB,aAAazB,IAAIO,KAA5B,CAApB;AAAA,SAAb;AACAf,aAAKJ,OAAL,CAAa,eAAO;AAChBY,gBAAIO,KAAJ,GAAYC,KAAKC,KAAL,CAAYT,IAAIO,KAAJ,IAAaP,IAAIY,MAAJ,GAAa,OAAKR,YAAlB,GAAiCqB,UAA9C,IAA4DzB,IAAIY,MAAjE,GAA4E,OAAKrC,MAAL,GAAc,CAA1F,GAA+F,OAAKQ,KAA/G,CAAZ;AACAiB,gBAAIY,MAAJ,GAAaJ,KAAKC,KAAL,CAAYT,IAAIY,MAAJ,GAAa,OAAKR,YAAlB,GAAiCqB,UAAlC,GAAiD,OAAKlD,MAAL,GAAc,CAA/D,GAAoE,OAAKQ,KAApF,CAAb;AACAiB,gBAAIpB,KAAJ,CAAUL,MAAV,GAAmB,OAAKA,MAAL,GAAc,IAAjC;AACH,SAJD;AAKH,KARD;;AAUA,WAAO,IAAP;AACH,CA9BD","file":"cube-gallery.js","sourcesContent":["class CubeGallery {\n    constructor(id, { minHeight, margin }) {\n        // selector\n        this.id = id\n        // min height\n        this.minHeight = minHeight && minHeight > 0 ? minHeight : 150\n        // unit\n        this.unit = 'px'\n        // margin\n        this.margin = margin && margin > 0 ? margin : 0\n        \n        // gallery container\n        this.gallery = document.querySelector(`#${ this.id }`)\n        this.gallery.style.fontSize = '0' // remove white spaces\n        this.gallery.style.lineHeight = '0' // remove white spaces\n\n        // extra borders or padding or margins that can be added with css\n        this.extra = 0\n        \n        // img wrapper <a>\n        let wrapper = document.querySelectorAll(`#${ this.id } a`)\n        if (wrapper.length > 0) {\n            this.findExtraWidth(wrapper[0])\n            wrapper.forEach(a => {\n                a.style.display = 'inline-block'\n                a.style.position = 'relative'\n            })\n        }\n\n        let imgs = document.querySelectorAll(`#${ this.id } img`)\n        this.findExtraWidth(imgs[0])\n        \n        window.addEventListener('resize', () => {\n            this.resize()\n        })\n\n        // wait for all images loaded\n        var loadData = () => this.loadData()\n        var create = () => this.create()\n        var counter = 0\n\n        imgs.forEach.call(imgs, function(img) {\n            if (img.complete) {\n                counter++;\n                if (counter === imgs.length) {\n                    console.log('All images loaded!');\n                    loadData() // load varible datas\n                    create() // build gallery\n                }\n            }\n            else {\n                img.addEventListener('load', () => {\n                    counter++;\n                    if (counter === imgs.length) {\n                        console.log('All images loaded!');\n                        loadData() // load varible datas\n                        create() // build gallery\n                    }\n                }, false)\n            }\n        })\n    }\n\n    loadData () {\n        // gallery width\n        this.galleryWidth = this.gallery.offsetWidth\n\n        // images\n        this.images = document.querySelectorAll(`#${ this.id } img`)\n        this.images.forEach(img => {\n            img.width = Math.floor(img.naturalWidth * this.minHeight / img.naturalHeight), // default width\n            img.height = this.minHeight // default height\n        })\n        // count images\n        this.nbImages = this.images.length\n    }\n\n    // check if element has borders\n    findExtraWidth (elm) {\n        let borders = getComputedStyle(elm)\n        let borderLeft = Number(borders.borderLeftWidth.substr(0, borders.borderLeftWidth.length - 2))\n        let borderRight = Number(borders.borderRightWidth.substr(0, borders.borderLeftWidth.length - 2))\n        this.extra = this.extra + borderLeft + borderRight\n    }\n}\n\nCubeGallery.prototype.resize = function () {\n    this.loadData()\n    return this.create()\n}\n\nCubeGallery.prototype.create = function () { \n    var rows = []\n    var imgs = []\n    var sumOfWidth = 0 // sum of the width of the images\n    for (let i = 0; i < this.nbImages; i++) {\n        let currentImg = this.images[i]\n        let nextImg = this.images[i+1] != undefined ? this.images[i+1] : null\n\n        sumOfWidth = Math.floor(sumOfWidth + currentImg.width)\n\n        imgs.push(currentImg)\n\n        if (nextImg == null || Math.floor(sumOfWidth + nextImg.width) > this.galleryWidth) { // if row is filled\n            rows.push(imgs)\n            sumOfWidth = 0\n            imgs = []\n        }\n    }\n\n    rows.forEach(imgs => {\n        let sumOfWidth = 0 // sum of the width of the images\n        imgs.forEach(img => sumOfWidth = Math.floor(sumOfWidth + img.width))\n        imgs.forEach(img => {\n            img.width = Math.floor((img.width * (img.height * this.galleryWidth / sumOfWidth) / img.height) - (this.margin * 2) - this.extra)\n            img.height = Math.floor((img.height * this.galleryWidth / sumOfWidth) - (this.margin * 2) - this.extra)\n            img.style.margin = this.margin + 'px'\n        })\n    })\n\n    return this\n}"]}